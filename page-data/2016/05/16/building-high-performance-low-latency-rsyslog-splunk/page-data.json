{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/2016/05/16/building-high-performance-low-latency-rsyslog-splunk/",
    "result": {"data":{"site":{"siteMetadata":{"title":"RFaircloth Data Nerd"}},"markdownRemark":{"id":"de7f23a7-e279-5fc3-b9fc-9f9e4094a22b","excerpt":"This is a brief followup on my earlier post in a very large scale environment write -> monitor –> read between a log appending source such as rsyslogd and…","html":"<p>This is a brief followup on my earlier post in a very large scale environment write -> monitor –> read between a log appending source such as rsyslogd and Splunk can impact the latency of log data entry into the destination environment. Last week I stumbled onto a feature of Rsyslog developed a couple of major versions ago that has been very under appreciated. OmProgram allows a developer to receive events from rsyslog using any program without first waiting for disk write. I’ve developed a little bit of code allowing direct transfer of events to Splunk using the http collector download and try it out.</p>\n<p>What the output module allows for is direct scale-able transfer between rsyslog and splunk in native protocols. Ideal use cases include dynamically scaling cloud environments and embedded devices where agents are not acceptable.</p>\n<p>Credits</p>\n<ul>\n<li>Rsyslog dev team for making this possible and Rainer for this <a href=\"http://www.rsyslog.com/rsyslog-v8-improvements-and-how-to-write-plugins-in-any-language/\">presentation</a> that inspired me</li>\n<li>Splunk dev team for the really awesome http event collector and George who developed the <a href=\"http://blogs.splunk.com/2015/12/11/http-event-collect-a-python-class/\">python class interface </a></li>\n<li>Splunk Stream team who added direct event collector usage in stream 6.5 proving significant scale.</li>\n</ul>\n<p>Setup</p>\n<ul>\n<li>Setup http event collector behind a load balancer</li>\n<li>Note your token</li>\n<li>Install requests using apt,yum or pip <a href=\"http://docs.python-requests.org/en/master/user/install/\">http://docs.python-requests.org/en/master/user/install/</a></li>\n<li>If using certificate verification setup what is required for requests</li>\n<li>“git” the code <a href=\"https://bitbucket.org/rfaircloth-splunk/rsyslog-omsplunk/src\">https://bitbucket.org/rfaircloth-splunk/rsyslog-omsplunk/src</a></li>\n<li>place <a href=\"https://bitbucket.org/rfaircloth-splunk/rsyslog-omsplunk/src/ae4c14509a181b7f543382be75d76a0393f9c937/omsplunkhec.py?at=master\" title=\"omsplunkhec.py\">omsplunkhec.py</a> and <a href=\"https://bitbucket.org/rfaircloth-splunk/rsyslog-omsplunk/src/ae4c14509a181b7f543382be75d76a0393f9c937/splunk_http_event_collector.py?at=master\" title=\"splunk_http_event_collector.py\">splunk_http_event_collector.py</a> in a location executable by rsyslog</li>\n<li>Setup rsyslog rule set with an action similar to the following ```\n<span class=\"k\">module</span>(<span class=\"n\">load</span>=<span class=\"s\">“omprog”</span>)\n<a name=\"rsyslogd.d.conf.example-2\"></a><span class=\"n\">action</span>(<span class=\"n\">type</span>=<span class=\"s\">“omprog”</span>\n<a name=\"rsyslogd.d.conf.example-3\"></a> <span class=\"k\">binary</span>=<span class=\"s\">“/opt/rsyslog/hecout.py —source=rsyslog:hec —sourcetype=syslog —index=main”</span>\n<a name=\"rsyslogd.d.conf.example-4\"></a> <span class=\"n\">template</span>=<span class=\"s\">“RSYSLOG_TraditionalFileFormat”</span>)\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"></code></pre></div>\n</li>\n</ul>","frontmatter":{"title":"Building High Performance low latency rsyslog for Splunk","date":"May 16, 2016","description":null}},"previous":{"fields":{"slug":"/2016/05/16/building-reliable-rsyslogd-infrastructure-splunk/"},"frontmatter":{"title":"Building reliable rsyslogd infrastructure for Splunk"}},"next":{"fields":{"slug":"/2016/07/27/syncing-up-shclusterapps/"},"frontmatter":{"title":"Syncing up shclusterapps"}}},"pageContext":{"id":"de7f23a7-e279-5fc3-b9fc-9f9e4094a22b","previousPostId":"5faca7fb-6677-51b0-a0d8-e5fb3cc7d8de","nextPostId":"97de940f-e930-5006-9689-2ef31f0a5891"}},
    "staticQueryHashes": ["2841359383","3257411868"]}