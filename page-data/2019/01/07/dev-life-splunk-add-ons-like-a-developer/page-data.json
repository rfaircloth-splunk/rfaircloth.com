{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/2019/01/07/dev-life-splunk-add-ons-like-a-developer/",
    "result": {"data":{"site":{"siteMetadata":{"title":"RFaircloth Data Nerd"}},"markdownRemark":{"id":"3163dd40-5e74-56bf-bfc0-8782c42015c2","excerpt":"As a life long (seems that way) software developer come to Splunk I would like to have some of the properties of a Integrated Development Environment (IDE…","html":"<p>As a life long (seems that way) software developer come to Splunk I would like to have some of the properties of a Integrated Development Environment (IDE). This blog post walks you through setting up and experiencing my approach to development for Splunk I wrote a second post in this series creating an actual add-on for Splunk using this toolchain. <a href=\"https://www.rfaircloth.com/2019/01/07/building-a-cef-source-add-on-for-splunk-enterprise/\">https://www.rfaircloth.com/2019/01/07/building-a-cef-source-add-on-for-splunk-enterprise/</a></p>\n<ul>\n<li>I can edit “code” i.e splunk conf in my editor and reload the code without restarting</li>\n<li>Every time I build/debug I have a clean environment</li>\n<li>I can run unit tests manually or automatically in a consistent way.</li>\n<li>I can participate in VCS (i.e. git) if desired</li>\n<li>I can consistently reproduce build and packaging including integration into a CI/CD process</li>\n<li>I can leverage dependencies from other developed products.</li>\n<li>Have ready access to common tools like add-on builder and eventgen</li>\n</ul>\n<h2>Setting up the environment Mac OSX</h2>\n<ul>\n<li>Install <a href=\"https://brew.sh/\">Brew</a></li>\n<li>Install LibMagic “brew install libmagic”</li>\n<li>Install python “brew install python”</li>\n<li>Install pandoc “brew install pandoc”</li>\n<li>Install moreutills “brew <strong>install moreutils”</strong></li>\n<li>Install jq “brew install jq”</li>\n<li>Install lxml support “xcode-select –install”</li>\n<li>Install git “brew install git”</li>\n<li>Install git flow “brew install git-flow”</li>\n<li>Install gitversion “brew <strong>install</strong> gitversion”</li>\n<li>Install virtual env for python “sudo pip install virtualenv”</li>\n<li>Install <a href=\"https://docs.docker.com/docker-for-mac/install/\">docker</a></li>\n<li>Create the virtual env “virtualenv ~/venv/splservices”</li>\n<li>Activate the new env “source ~/venv/splservices/bin/activate”</li>\n<li>Install pip “sudo python easy_install pip”</li>\n<li>Install our specific requirements “pip install -r <a href=\"https://bitbucket.org/SPLServices/addonbuildimage/raw/master/requirements.txt%E2%80%9D\">https://bitbucket.org/SPLServices/addonbuildimage/raw/master/requirements.txt”</a></li>\n<li>I personally prefer the <a href=\"https://atom.io/\">atom editor </a></li>\n</ul>\n<h2>Setup the local project</h2>\n<p>For demonstration purposes we are going to work with one of my recent add-ons for Splunk. A full tutorial on git is beyond the scope of this article we will simply clone the repo and start a feature branch.</p>\n<ul>\n<li>Clone the repo “git clone <a href=\"https://bitbucket.org/SPLServices/ta-cef-for-splunk.git%E2%80%9D\">https://bitbucket.org/SPLServices/ta-cef-for-splunk.git”</a></li>\n<li>Cd into the repo “cd ta-cef-for-splunk”</li>\n<li>Initials git submodules “git submodule init”</li>\n<li>Setup git flow “git flow init -d”</li>\n<li>Start a new feature “git flow feature start myfeature”</li>\n</ul>\n<h2>Package and Test</h2>\n<p>Before we change anything we should verify we can recreate a successful build.</p>\n<ul>\n<li>Build a package “make package”</li>\n<li>Verify the package builds the last line will report something like this, path and version will vary.</li>\n<li></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;pre class=\"wp-block-code\">```\nslim package: [NOTE] Source package exported to \"/Users/user/Downloads/ta-cef-for-splunk/out/packages/splunkbase/TA-cef-for-splunk-0.2.0-myfeature.1+17.tar.gz\"</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">\n- Test the package using Splunk’s appinspect “make package\\_test”\n- Verify the test report shows one failure. While developing this one failure is expected which is the version number does not conform to release rules for Splunk Base. Note: per semver.org the feature branch version clearly indicates this is a development build this is helpful in preventing accidental “escapes” to production\n</code></pre></div>\n<pre class=\"wp-block-code\">```\nsplunk-appinspect inspect out/packages/splunkbase/TA-cef-for-splunk-0.2.0-myfeature.1+17.tar.gz --data-format junitxml --output-file test-reports/TA-cef-for-splunk.xml --excluded-tags manual\nValidating: TA-cef-for-splunk Version: 0.2.0-myfeature.1+17\n.......F.....SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS\nSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS\nSSSSSSSSSSSSSSSSSSSSSSSSSSSSS\n\nA default value of 25 for max-messages will be used.\nSplunk app packaging standards These checks validate that a Splunk app has been \ncorrectly packaged, and can be provided safely for package validation. \n    Check that the extracted Splunk App contains a default/app.conf file \n    that contains an [id] or [launcher] stanza with a version property that is \n    formatted as Major.Minor.Revision. \n        FAILURE: `Major.Minor.Revision` version numbering is required. \n            File: default/app.conf Line Number: 20 \n\n\nTA-cef-for-splunk Report Summary:\n\n       skipped: 176\n       success:  9\n  manual_check:  0\n       failure:  1\n       warning:  0\n         error:  0\nnot_applicable:  3\n-------------------\n         Total: 189\n\nPlease note that more issues could be found out later during the optional manual review process.\n```\n```\n\nInteractive Development\n-----------------------\n\nNow for the good stuff how can we interactively lets fire up a Splunk Docker container with the latest version of Splunk and our local copy of the addon. “make docker\\_dev” wait for the text “Ansible playbook complete” to appear on terminal indicating Splunk is ready to work. Visit “http://127.0.0.1:8000” and login to a fresh copy of Splunk with the addon ready to go. The password will be “Changed!11” lets prove life by making a simple change to our addon.\n\n- Open atom or the editor of your choice\n- Navigate to &lt;project&gt;/src/TA-cef-for-splunk/default/props.conf\n- Add the “EVAL-alive=”yes”” to the \\[cef\\] stanza\n- Return to the running copy of Splunk and visit http://127.0.0.1:8000/debug/refresh/ (click refresh)\n- Turn on the event gen “Settings –&gt;Data Inputs –&gt; SA Event-Gen then click enable\n- Wait about and minute and click disable\n- Go back to search and check for the alive field “index=\\* sourcetype=cef | head | table sourcetype,alive”\n\nFurther reading\n---------------\n\n- Read more about [Event Gen ](https://github.com/splunk/eventgen)\n- Read more about [developing](http://dev.splunk.com) for Splunk\n- Want to see a fully working CI/CD for Splunk Add ons? Visit the bitbucket repository [https://bitbucket.org/splservices/](https://bitbucket.org/SPLServices/ta-cef-for-splunk/overview)\n","frontmatter":{"title":"Dev Life: Splunk Add-ons like a developer","date":"January 07, 2019","description":null}},"previous":{"fields":{"slug":"/2018/10/07/on-boarding-windows-data-for-splunk/"},"frontmatter":{"title":"On boarding Windows Data for Splunk"}},"next":{"fields":{"slug":"/2019/01/07/building-a-cef-source-add-on-for-splunk-enterprise/"},"frontmatter":{"title":"Building a CEF source add on for Splunk Enterprise"}}},"pageContext":{"id":"3163dd40-5e74-56bf-bfc0-8782c42015c2","previousPostId":"11e580a6-3668-5ab6-93eb-80a2889444d4","nextPostId":"502d0015-ab9f-5335-9e10-9df7dd43363c"}},
    "staticQueryHashes": ["2841359383","3257411868"]}